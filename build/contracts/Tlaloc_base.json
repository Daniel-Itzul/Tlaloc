{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_insuredAmountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "amountTakenETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insuredAmountETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "premiumETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requester",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "take",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taker",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "contracts/Tlaloc_base.sol"
  },
  "ast": {
    "absolutePath": "contracts/Tlaloc_base.sol",
    "exportedSymbols": {
      "Tlaloc_base": [
        70
      ]
    },
    "id": 71,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".1"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:0"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 70,
        "linearizedBaseContracts": [
          70
        ],
        "name": "Tlaloc_base",
        "nameLocation": "34:11:0",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "b61e96a5",
            "id": 3,
            "mutability": "mutable",
            "name": "requester",
            "nameLocation": "76:9:0",
            "nodeType": "VariableDeclaration",
            "scope": 70,
            "src": "53:32:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address_payable",
              "typeString": "address payable"
            },
            "typeName": {
              "id": 2,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "53:15:0",
              "stateMutability": "payable",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "782b3602",
            "id": 5,
            "mutability": "mutable",
            "name": "taker",
            "nameLocation": "114:5:0",
            "nodeType": "VariableDeclaration",
            "scope": 70,
            "src": "91:28:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address_payable",
              "typeString": "address payable"
            },
            "typeName": {
              "id": 4,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "91:15:0",
              "stateMutability": "payable",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "d8fcc682",
            "id": 7,
            "mutability": "mutable",
            "name": "premiumETH",
            "nameLocation": "226:10:0",
            "nodeType": "VariableDeclaration",
            "scope": 70,
            "src": "214:22:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 6,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "214:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "8afb856f",
            "id": 9,
            "mutability": "mutable",
            "name": "insuredAmountETH",
            "nameLocation": "254:16:0",
            "nodeType": "VariableDeclaration",
            "scope": 70,
            "src": "242:28:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 8,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "242:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "609af333",
            "id": 11,
            "mutability": "mutable",
            "name": "amountTakenETH",
            "nameLocation": "288:14:0",
            "nodeType": "VariableDeclaration",
            "scope": 70,
            "src": "276:26:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 10,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "276:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 33,
              "nodeType": "Block",
              "src": "452:174:0",
              "statements": [
                {
                  "expression": {
                    "id": 22,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 16,
                      "name": "requester",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3,
                      "src": "510:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 19,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "530:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 20,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "530:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 18,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "522:8:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_payable_$",
                          "typeString": "type(address payable)"
                        },
                        "typeName": {
                          "id": 17,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "522:8:0",
                          "stateMutability": "payable",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 21,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "522:19:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "510:31:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "id": 23,
                  "nodeType": "ExpressionStatement",
                  "src": "510:31:0"
                },
                {
                  "expression": {
                    "id": 27,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 24,
                      "name": "premiumETH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7,
                      "src": "551:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 25,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "564:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 26,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "value",
                      "nodeType": "MemberAccess",
                      "src": "564:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "551:22:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 28,
                  "nodeType": "ExpressionStatement",
                  "src": "551:22:0"
                },
                {
                  "expression": {
                    "id": 31,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 29,
                      "name": "insuredAmountETH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9,
                      "src": "583:16:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 30,
                      "name": "_insuredAmountETH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 13,
                      "src": "602:17:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "583:36:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 32,
                  "nodeType": "ExpressionStatement",
                  "src": "583:36:0"
                }
              ]
            },
            "id": 34,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 14,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13,
                  "mutability": "mutable",
                  "name": "_insuredAmountETH",
                  "nameLocation": "425:17:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 34,
                  "src": "420:22:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "420:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "419:24:0"
            },
            "returnParameters": {
              "id": 15,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "452:0:0"
            },
            "scope": 70,
            "src": "407:219:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 68,
              "nodeType": "Block",
              "src": "665:210:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 45,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 38,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "683:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 39,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "683:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 44,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 40,
                            "name": "insuredAmountETH",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 9,
                            "src": "696:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_rational_1000000000000000000_by_1",
                              "typeString": "int_const 1000000000000000000"
                            },
                            "id": 43,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "leftExpression": {
                              "hexValue": "3130",
                              "id": 41,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "713:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10_by_1",
                                "typeString": "int_const 10"
                              },
                              "value": "10"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "**",
                            "rightExpression": {
                              "hexValue": "3138",
                              "id": 42,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "717:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_18_by_1",
                                "typeString": "int_const 18"
                              },
                              "value": "18"
                            },
                            "src": "713:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1000000000000000000_by_1",
                              "typeString": "int_const 1000000000000000000"
                            }
                          },
                          "src": "696:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "683:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "796f75206d757374207375626d69742074686520696e737572656420616d6f756e74",
                        "id": 46,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "721:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_bc3d6a94028bde28536683f35f52361ff9c77e4fd9555761323b1a7070c992a4",
                          "typeString": "literal_string \"you must submit the insured amount\""
                        },
                        "value": "you must submit the insured amount"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_bc3d6a94028bde28536683f35f52361ff9c77e4fd9555761323b1a7070c992a4",
                          "typeString": "literal_string \"you must submit the insured amount\""
                        }
                      ],
                      "id": 37,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "675:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 47,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "675:83:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 48,
                  "nodeType": "ExpressionStatement",
                  "src": "675:83:0"
                },
                {
                  "expression": {
                    "id": 55,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 49,
                      "name": "taker",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5,
                      "src": "768:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 52,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "784:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 53,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "784:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 51,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "776:8:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_payable_$",
                          "typeString": "type(address payable)"
                        },
                        "typeName": {
                          "id": 50,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "776:8:0",
                          "stateMutability": "payable",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 54,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "776:19:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "768:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "id": 56,
                  "nodeType": "ExpressionStatement",
                  "src": "768:27:0"
                },
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 60,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 57,
                      "name": "amountTakenETH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11,
                      "src": "805:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "id": 58,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "823:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 59,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "value",
                      "nodeType": "MemberAccess",
                      "src": "823:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "805:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 61,
                  "nodeType": "ExpressionStatement",
                  "src": "805:27:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 65,
                        "name": "premiumETH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7,
                        "src": "857:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 62,
                        "name": "taker",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5,
                        "src": "842:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "id": 64,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "src": "842:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 66,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "842:26:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 67,
                  "nodeType": "ExpressionStatement",
                  "src": "842:26:0"
                }
              ]
            },
            "functionSelector": "159090bd",
            "id": 69,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "take",
            "nameLocation": "642:4:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 35,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "646:2:0"
            },
            "returnParameters": {
              "id": 36,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "665:0:0"
            },
            "scope": 70,
            "src": "633:242:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 71,
        "src": "25:853:0"
      }
    ],
    "src": "0:878:0"
  },
  "bytecode": "608060405260405161029038038061029083398101604081905261002291610040565b600080546001600160a01b0319163317905534600255600355610058565b600060208284031215610051578081fd5b5051919050565b610229806100676000396000f3fe6080604052600436106100555760003560e01c8063159090bd1461005a578063609af33314610064578063782b36021461008d5780638afb856f146100c5578063b61e96a5146100db578063d8fcc682146100fb575b600080fd5b610062610111565b005b34801561007057600080fd5b5061007a60045481565b6040519081526020015b60405180910390f35b34801561009957600080fd5b506001546100ad906001600160a01b031681565b6040516001600160a01b039091168152602001610084565b3480156100d157600080fd5b5061007a60035481565b3480156100e757600080fd5b506000546100ad906001600160a01b031681565b34801561010757600080fd5b5061007a60025481565b60035461012690670de0b6b3a76400006101c8565b34146101835760405162461bcd60e51b815260206004820152602260248201527f796f75206d757374207375626d69742074686520696e737572656420616d6f756044820152611b9d60f21b606482015260840160405180910390fd5b600180546001600160a01b0319163390811790915560025460405181156108fc0291906000818181858888f193505050501580156101c5573d6000803e3d6000fd5b50565b60008160001904831182151516156101ee57634e487b7160e01b81526011600452602481fd5b50029056fea2646970667358221220f663682b9b08ba2ba873c7a4be62d60206c629c6f43e201313544d83484cdc2c64736f6c63430008030033",
  "bytecodeSha1": "766aafad964d805b02671efaae805c4f91076829",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.3+commit.8d00100c"
  },
  "contractName": "Tlaloc_base",
  "coverageMap": {
    "branches": {
      "0": {
        "Tlaloc_base.take": {
          "3": [
            683,
            719,
            true
          ]
        }
      }
    },
    "statements": {
      "0": {
        "Tlaloc_base.take": {
          "0": [
            675,
            758
          ],
          "1": [
            768,
            795
          ],
          "2": [
            842,
            868
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "6080604052600436106100555760003560e01c8063159090bd1461005a578063609af33314610064578063782b36021461008d5780638afb856f146100c5578063b61e96a5146100db578063d8fcc682146100fb575b600080fd5b610062610111565b005b34801561007057600080fd5b5061007a60045481565b6040519081526020015b60405180910390f35b34801561009957600080fd5b506001546100ad906001600160a01b031681565b6040516001600160a01b039091168152602001610084565b3480156100d157600080fd5b5061007a60035481565b3480156100e757600080fd5b506000546100ad906001600160a01b031681565b34801561010757600080fd5b5061007a60025481565b60035461012690670de0b6b3a76400006101c8565b34146101835760405162461bcd60e51b815260206004820152602260248201527f796f75206d757374207375626d69742074686520696e737572656420616d6f756044820152611b9d60f21b606482015260840160405180910390fd5b600180546001600160a01b0319163390811790915560025460405181156108fc0291906000818181858888f193505050501580156101c5573d6000803e3d6000fd5b50565b60008160001904831182151516156101ee57634e487b7160e01b81526011600452602481fd5b50029056fea2646970667358221220f663682b9b08ba2ba873c7a4be62d60206c629c6f43e201313544d83484cdc2c64736f6c63430008030033",
  "deployedSourceMap": "25:853:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;633:242;;;:::i;:::-;;276:26;;;;;;;;;;;;;;;;;;;787:25:1;;;775:2;760:18;276:26:0;;;;;;;;91:28;;;;;;;;;;-1:-1:-1;91:28:0;;;;-1:-1:-1;;;;;91:28:0;;;;;;-1:-1:-1;;;;;194:32:1;;;176:51;;164:2;149:18;91:28:0;131:102:1;242:28:0;;;;;;;;;;;;;;;;53:32;;;;;;;;;;-1:-1:-1;53:32:0;;;;-1:-1:-1;;;;;53:32:0;;;214:22;;;;;;;;;;;;;;;;633:242;696:16;;:23;;713:6;696:23;:::i;:::-;683:9;:36;675:83;;;;-1:-1:-1;;;675:83:0;;440:2:1;675:83:0;;;422:21:1;479:2;459:18;;;452:30;518:34;498:18;;;491:62;-1:-1:-1;;;569:18:1;;;562:32;611:19;;675:83:0;;;;;;;;768:5;:27;;-1:-1:-1;;;;;;768:27:0;784:10;768:27;;;;;;857:10;;842:26;;;;;;;857:10;768:5;842:26;768:5;842:26;857:10;784;842:26;;;;;;;;;;;;;;;;;;;;;633:242::o;823:277:1:-;;929:1;925;921:6;917:14;914:1;911:21;906:1;899:9;892:17;888:45;885:2;;;-1:-1:-1;;;956:37:1;;1016:4;1013:1;1006:15;1050:4;963:7;1034:21;885:2;-1:-1:-1;1085:9:1;;875:225::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    25,
    878
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x159090BD EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x609AF333 EQ PUSH2 0x64 JUMPI DUP1 PUSH4 0x782B3602 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x8AFB856F EQ PUSH2 0xC5 JUMPI DUP1 PUSH4 0xB61E96A5 EQ PUSH2 0xDB JUMPI DUP1 PUSH4 0xD8FCC682 EQ PUSH2 0xFB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x62 PUSH2 0x111 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0xAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x84 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH2 0xAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x107 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x126 SWAP1 PUSH8 0xDE0B6B3A7640000 PUSH2 0x1C8 JUMP JUMPDEST CALLVALUE EQ PUSH2 0x183 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x796F75206D757374207375626D69742074686520696E737572656420616D6F75 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x1B9D PUSH1 0xF2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD DUP2 ISZERO PUSH2 0x8FC MUL SWAP2 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1C5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1EE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP MUL SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF6 PUSH4 0x682B9B08 0xBA 0x2B 0xA8 PUSH20 0xC7A4BE62D60206C629C6F43E201313544D83484C 0xDC 0x2C PUSH5 0x736F6C6343 STOP ADDMOD SUB STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        25,
        878
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "8": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "LT",
      "path": "0"
    },
    "9": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x55"
    },
    "12": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "13": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "16": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE0"
    },
    "18": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "SHR",
      "path": "0"
    },
    "19": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "DUP1",
      "path": "0"
    },
    "20": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x159090BD"
    },
    "25": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "EQ",
      "path": "0"
    },
    "26": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5A"
    },
    "29": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "30": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "DUP1",
      "path": "0"
    },
    "31": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x609AF333"
    },
    "36": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "EQ",
      "path": "0"
    },
    "37": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x64"
    },
    "40": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "41": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "DUP1",
      "path": "0"
    },
    "42": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x782B3602"
    },
    "47": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "EQ",
      "path": "0"
    },
    "48": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8D"
    },
    "51": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "52": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "DUP1",
      "path": "0"
    },
    "53": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x8AFB856F"
    },
    "58": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "EQ",
      "path": "0"
    },
    "59": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC5"
    },
    "62": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "63": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "DUP1",
      "path": "0"
    },
    "64": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xB61E96A5"
    },
    "69": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "EQ",
      "path": "0"
    },
    "70": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDB"
    },
    "73": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "74": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "DUP1",
      "path": "0"
    },
    "75": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xD8FCC682"
    },
    "80": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "EQ",
      "path": "0"
    },
    "81": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFB"
    },
    "84": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "85": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "86": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "88": {
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "DUP1",
      "path": "0"
    },
    "89": {
      "first_revert": true,
      "fn": null,
      "offset": [
        25,
        878
      ],
      "op": "REVERT",
      "path": "0"
    },
    "90": {
      "fn": "Tlaloc_base.take",
      "offset": [
        633,
        875
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "91": {
      "fn": "Tlaloc_base.take",
      "offset": [
        633,
        875
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x62"
    },
    "94": {
      "fn": "Tlaloc_base.take",
      "offset": [
        633,
        875
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x111"
    },
    "97": {
      "fn": "Tlaloc_base.take",
      "jump": "i",
      "offset": [
        633,
        875
      ],
      "op": "JUMP",
      "path": "0"
    },
    "98": {
      "fn": "Tlaloc_base.take",
      "offset": [
        633,
        875
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "99": {
      "fn": "Tlaloc_base.take",
      "offset": [
        633,
        875
      ],
      "op": "STOP",
      "path": "0"
    },
    "100": {
      "offset": [
        276,
        302
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "101": {
      "fn": "Tlaloc_base.take",
      "offset": [
        276,
        302
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "102": {
      "fn": "Tlaloc_base.take",
      "offset": [
        276,
        302
      ],
      "op": "DUP1",
      "path": "0"
    },
    "103": {
      "fn": "Tlaloc_base.take",
      "offset": [
        276,
        302
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "104": {
      "fn": "Tlaloc_base.take",
      "offset": [
        276,
        302
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x70"
    },
    "107": {
      "fn": "Tlaloc_base.take",
      "offset": [
        276,
        302
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "108": {
      "fn": "Tlaloc_base.take",
      "offset": [
        276,
        302
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "110": {
      "fn": "Tlaloc_base.take",
      "offset": [
        276,
        302
      ],
      "op": "DUP1",
      "path": "0"
    },
    "111": {
      "fn": "Tlaloc_base.take",
      "offset": [
        276,
        302
      ],
      "op": "REVERT",
      "path": "0"
    },
    "112": {
      "fn": "Tlaloc_base.take",
      "offset": [
        276,
        302
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "113": {
      "fn": "Tlaloc_base.take",
      "offset": [
        276,
        302
      ],
      "op": "POP",
      "path": "0"
    },
    "114": {
      "fn": "Tlaloc_base.take",
      "offset": [
        276,
        302
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7A"
    },
    "117": {
      "fn": "Tlaloc_base.take",
      "offset": [
        276,
        302
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "119": {
      "fn": "Tlaloc_base.take",
      "offset": [
        276,
        302
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "120": {
      "fn": "Tlaloc_base.take",
      "offset": [
        276,
        302
      ],
      "op": "DUP2",
      "path": "0"
    },
    "121": {
      "fn": "Tlaloc_base.take",
      "offset": [
        276,
        302
      ],
      "op": "JUMP",
      "path": "0"
    },
    "122": {
      "fn": "Tlaloc_base.take",
      "offset": [
        276,
        302
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "123": {
      "fn": "Tlaloc_base.take",
      "offset": [
        276,
        302
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "125": {
      "fn": "Tlaloc_base.take",
      "offset": [
        276,
        302
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "126": {
      "op": "SWAP1"
    },
    "127": {
      "op": "DUP2"
    },
    "128": {
      "op": "MSTORE"
    },
    "129": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "131": {
      "op": "ADD"
    },
    "132": {
      "offset": [
        276,
        302
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "133": {
      "fn": "Tlaloc_base.take",
      "offset": [
        276,
        302
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "135": {
      "fn": "Tlaloc_base.take",
      "offset": [
        276,
        302
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "136": {
      "fn": "Tlaloc_base.take",
      "offset": [
        276,
        302
      ],
      "op": "DUP1",
      "path": "0"
    },
    "137": {
      "fn": "Tlaloc_base.take",
      "offset": [
        276,
        302
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "138": {
      "fn": "Tlaloc_base.take",
      "offset": [
        276,
        302
      ],
      "op": "SUB",
      "path": "0"
    },
    "139": {
      "fn": "Tlaloc_base.take",
      "offset": [
        276,
        302
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "140": {
      "fn": "Tlaloc_base.take",
      "offset": [
        276,
        302
      ],
      "op": "RETURN",
      "path": "0"
    },
    "141": {
      "offset": [
        91,
        119
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "142": {
      "fn": "Tlaloc_base.take",
      "offset": [
        91,
        119
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "143": {
      "fn": "Tlaloc_base.take",
      "offset": [
        91,
        119
      ],
      "op": "DUP1",
      "path": "0"
    },
    "144": {
      "fn": "Tlaloc_base.take",
      "offset": [
        91,
        119
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "145": {
      "fn": "Tlaloc_base.take",
      "offset": [
        91,
        119
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x99"
    },
    "148": {
      "fn": "Tlaloc_base.take",
      "offset": [
        91,
        119
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "149": {
      "fn": "Tlaloc_base.take",
      "offset": [
        91,
        119
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "151": {
      "fn": "Tlaloc_base.take",
      "offset": [
        91,
        119
      ],
      "op": "DUP1",
      "path": "0"
    },
    "152": {
      "fn": "Tlaloc_base.take",
      "offset": [
        91,
        119
      ],
      "op": "REVERT",
      "path": "0"
    },
    "153": {
      "fn": "Tlaloc_base.take",
      "offset": [
        91,
        119
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "154": {
      "op": "POP"
    },
    "155": {
      "offset": [
        91,
        119
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "157": {
      "fn": "Tlaloc_base.take",
      "offset": [
        91,
        119
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "158": {
      "fn": "Tlaloc_base.take",
      "offset": [
        91,
        119
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xAD"
    },
    "161": {
      "fn": "Tlaloc_base.take",
      "offset": [
        91,
        119
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "162": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "164": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "166": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "168": {
      "op": "SHL"
    },
    "169": {
      "op": "SUB"
    },
    "170": {
      "offset": [
        91,
        119
      ],
      "op": "AND",
      "path": "0"
    },
    "171": {
      "fn": "Tlaloc_base.take",
      "offset": [
        91,
        119
      ],
      "op": "DUP2",
      "path": "0"
    },
    "172": {
      "fn": "Tlaloc_base.take",
      "offset": [
        91,
        119
      ],
      "op": "JUMP",
      "path": "0"
    },
    "173": {
      "fn": "Tlaloc_base.take",
      "offset": [
        91,
        119
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "174": {
      "fn": "Tlaloc_base.take",
      "offset": [
        91,
        119
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "176": {
      "fn": "Tlaloc_base.take",
      "offset": [
        91,
        119
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "177": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "179": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "181": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "183": {
      "op": "SHL"
    },
    "184": {
      "op": "SUB"
    },
    "185": {
      "op": "SWAP1"
    },
    "186": {
      "op": "SWAP2"
    },
    "187": {
      "op": "AND"
    },
    "188": {
      "op": "DUP2"
    },
    "189": {
      "op": "MSTORE"
    },
    "190": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "192": {
      "op": "ADD"
    },
    "193": {
      "offset": [
        91,
        119
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x84"
    },
    "196": {
      "op": "JUMP"
    },
    "197": {
      "offset": [
        242,
        270
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "198": {
      "fn": "Tlaloc_base.take",
      "offset": [
        242,
        270
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "199": {
      "fn": "Tlaloc_base.take",
      "offset": [
        242,
        270
      ],
      "op": "DUP1",
      "path": "0"
    },
    "200": {
      "fn": "Tlaloc_base.take",
      "offset": [
        242,
        270
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "201": {
      "fn": "Tlaloc_base.take",
      "offset": [
        242,
        270
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD1"
    },
    "204": {
      "fn": "Tlaloc_base.take",
      "offset": [
        242,
        270
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "205": {
      "fn": "Tlaloc_base.take",
      "offset": [
        242,
        270
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "207": {
      "fn": "Tlaloc_base.take",
      "offset": [
        242,
        270
      ],
      "op": "DUP1",
      "path": "0"
    },
    "208": {
      "fn": "Tlaloc_base.take",
      "offset": [
        242,
        270
      ],
      "op": "REVERT",
      "path": "0"
    },
    "209": {
      "fn": "Tlaloc_base.take",
      "offset": [
        242,
        270
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "210": {
      "fn": "Tlaloc_base.take",
      "offset": [
        242,
        270
      ],
      "op": "POP",
      "path": "0"
    },
    "211": {
      "fn": "Tlaloc_base.take",
      "offset": [
        242,
        270
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7A"
    },
    "214": {
      "fn": "Tlaloc_base.take",
      "offset": [
        242,
        270
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "216": {
      "fn": "Tlaloc_base.take",
      "offset": [
        242,
        270
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "217": {
      "fn": "Tlaloc_base.take",
      "offset": [
        242,
        270
      ],
      "op": "DUP2",
      "path": "0"
    },
    "218": {
      "fn": "Tlaloc_base.take",
      "offset": [
        242,
        270
      ],
      "op": "JUMP",
      "path": "0"
    },
    "219": {
      "offset": [
        53,
        85
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "220": {
      "fn": "Tlaloc_base.take",
      "offset": [
        53,
        85
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "221": {
      "fn": "Tlaloc_base.take",
      "offset": [
        53,
        85
      ],
      "op": "DUP1",
      "path": "0"
    },
    "222": {
      "fn": "Tlaloc_base.take",
      "offset": [
        53,
        85
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "223": {
      "fn": "Tlaloc_base.take",
      "offset": [
        53,
        85
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE7"
    },
    "226": {
      "fn": "Tlaloc_base.take",
      "offset": [
        53,
        85
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "227": {
      "fn": "Tlaloc_base.take",
      "offset": [
        53,
        85
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "229": {
      "fn": "Tlaloc_base.take",
      "offset": [
        53,
        85
      ],
      "op": "DUP1",
      "path": "0"
    },
    "230": {
      "fn": "Tlaloc_base.take",
      "offset": [
        53,
        85
      ],
      "op": "REVERT",
      "path": "0"
    },
    "231": {
      "fn": "Tlaloc_base.take",
      "offset": [
        53,
        85
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "232": {
      "op": "POP"
    },
    "233": {
      "offset": [
        53,
        85
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "235": {
      "fn": "Tlaloc_base.take",
      "offset": [
        53,
        85
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "236": {
      "fn": "Tlaloc_base.take",
      "offset": [
        53,
        85
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xAD"
    },
    "239": {
      "fn": "Tlaloc_base.take",
      "offset": [
        53,
        85
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "240": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "242": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "244": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "246": {
      "op": "SHL"
    },
    "247": {
      "op": "SUB"
    },
    "248": {
      "offset": [
        53,
        85
      ],
      "op": "AND",
      "path": "0"
    },
    "249": {
      "fn": "Tlaloc_base.take",
      "offset": [
        53,
        85
      ],
      "op": "DUP2",
      "path": "0"
    },
    "250": {
      "fn": "Tlaloc_base.take",
      "offset": [
        53,
        85
      ],
      "op": "JUMP",
      "path": "0"
    },
    "251": {
      "offset": [
        214,
        236
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "252": {
      "fn": "Tlaloc_base.take",
      "offset": [
        214,
        236
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "253": {
      "fn": "Tlaloc_base.take",
      "offset": [
        214,
        236
      ],
      "op": "DUP1",
      "path": "0"
    },
    "254": {
      "fn": "Tlaloc_base.take",
      "offset": [
        214,
        236
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "255": {
      "fn": "Tlaloc_base.take",
      "offset": [
        214,
        236
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x107"
    },
    "258": {
      "fn": "Tlaloc_base.take",
      "offset": [
        214,
        236
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "259": {
      "fn": "Tlaloc_base.take",
      "offset": [
        214,
        236
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "261": {
      "fn": "Tlaloc_base.take",
      "offset": [
        214,
        236
      ],
      "op": "DUP1",
      "path": "0"
    },
    "262": {
      "fn": "Tlaloc_base.take",
      "offset": [
        214,
        236
      ],
      "op": "REVERT",
      "path": "0"
    },
    "263": {
      "fn": "Tlaloc_base.take",
      "offset": [
        214,
        236
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "264": {
      "fn": "Tlaloc_base.take",
      "offset": [
        214,
        236
      ],
      "op": "POP",
      "path": "0"
    },
    "265": {
      "fn": "Tlaloc_base.take",
      "offset": [
        214,
        236
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7A"
    },
    "268": {
      "fn": "Tlaloc_base.take",
      "offset": [
        214,
        236
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "270": {
      "fn": "Tlaloc_base.take",
      "offset": [
        214,
        236
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "271": {
      "fn": "Tlaloc_base.take",
      "offset": [
        214,
        236
      ],
      "op": "DUP2",
      "path": "0"
    },
    "272": {
      "fn": "Tlaloc_base.take",
      "offset": [
        214,
        236
      ],
      "op": "JUMP",
      "path": "0"
    },
    "273": {
      "fn": "Tlaloc_base.take",
      "offset": [
        633,
        875
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "274": {
      "fn": "Tlaloc_base.take",
      "offset": [
        696,
        712
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 0,
      "value": "0x3"
    },
    "276": {
      "fn": "Tlaloc_base.take",
      "offset": [
        696,
        712
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "277": {
      "fn": "Tlaloc_base.take",
      "offset": [
        696,
        719
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x126"
    },
    "280": {
      "fn": "Tlaloc_base.take",
      "offset": [
        696,
        719
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "281": {
      "fn": "Tlaloc_base.take",
      "offset": [
        713,
        719
      ],
      "op": "PUSH8",
      "path": "0",
      "value": "0xDE0B6B3A7640000"
    },
    "290": {
      "fn": "Tlaloc_base.take",
      "offset": [
        696,
        719
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C8"
    },
    "293": {
      "fn": "Tlaloc_base.take",
      "jump": "i",
      "offset": [
        696,
        719
      ],
      "op": "JUMP",
      "path": "0"
    },
    "294": {
      "fn": "Tlaloc_base.take",
      "offset": [
        696,
        719
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "295": {
      "fn": "Tlaloc_base.take",
      "offset": [
        683,
        692
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "296": {
      "branch": 3,
      "fn": "Tlaloc_base.take",
      "offset": [
        683,
        719
      ],
      "op": "EQ",
      "path": "0"
    },
    "297": {
      "fn": "Tlaloc_base.take",
      "offset": [
        675,
        758
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x183"
    },
    "300": {
      "branch": 3,
      "fn": "Tlaloc_base.take",
      "offset": [
        675,
        758
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "301": {
      "fn": "Tlaloc_base.take",
      "offset": [
        675,
        758
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "303": {
      "fn": "Tlaloc_base.take",
      "offset": [
        675,
        758
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "304": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "308": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "310": {
      "op": "SHL"
    },
    "311": {
      "fn": "Tlaloc_base.take",
      "offset": [
        675,
        758
      ],
      "op": "DUP2",
      "path": "0"
    },
    "312": {
      "fn": "Tlaloc_base.take",
      "offset": [
        675,
        758
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "313": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "315": {
      "fn": "Tlaloc_base.take",
      "offset": [
        675,
        758
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "317": {
      "fn": "Tlaloc_base.take",
      "offset": [
        675,
        758
      ],
      "op": "DUP3",
      "path": "0"
    },
    "318": {
      "fn": "Tlaloc_base.take",
      "offset": [
        675,
        758
      ],
      "op": "ADD",
      "path": "0"
    },
    "319": {
      "op": "MSTORE"
    },
    "320": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "322": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "324": {
      "op": "DUP3"
    },
    "325": {
      "op": "ADD"
    },
    "326": {
      "op": "MSTORE"
    },
    "327": {
      "op": "PUSH32",
      "value": "0x796F75206D757374207375626D69742074686520696E737572656420616D6F75"
    },
    "360": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "362": {
      "op": "DUP3"
    },
    "363": {
      "op": "ADD"
    },
    "364": {
      "op": "MSTORE"
    },
    "365": {
      "op": "PUSH2",
      "value": "0x1B9D"
    },
    "368": {
      "op": "PUSH1",
      "value": "0xF2"
    },
    "370": {
      "op": "SHL"
    },
    "371": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "373": {
      "op": "DUP3"
    },
    "374": {
      "op": "ADD"
    },
    "375": {
      "op": "MSTORE"
    },
    "376": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "378": {
      "op": "ADD"
    },
    "379": {
      "fn": "Tlaloc_base.take",
      "offset": [
        675,
        758
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "381": {
      "fn": "Tlaloc_base.take",
      "offset": [
        675,
        758
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "382": {
      "fn": "Tlaloc_base.take",
      "offset": [
        675,
        758
      ],
      "op": "DUP1",
      "path": "0"
    },
    "383": {
      "fn": "Tlaloc_base.take",
      "offset": [
        675,
        758
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "384": {
      "fn": "Tlaloc_base.take",
      "offset": [
        675,
        758
      ],
      "op": "SUB",
      "path": "0"
    },
    "385": {
      "fn": "Tlaloc_base.take",
      "offset": [
        675,
        758
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "386": {
      "fn": "Tlaloc_base.take",
      "offset": [
        675,
        758
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "0"
    },
    "387": {
      "fn": "Tlaloc_base.take",
      "offset": [
        675,
        758
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "388": {
      "fn": "Tlaloc_base.take",
      "offset": [
        768,
        773
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 1,
      "value": "0x1"
    },
    "390": {
      "fn": "Tlaloc_base.take",
      "offset": [
        768,
        795
      ],
      "op": "DUP1",
      "path": "0"
    },
    "391": {
      "fn": "Tlaloc_base.take",
      "offset": [
        768,
        795
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "392": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "394": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "396": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "398": {
      "op": "SHL"
    },
    "399": {
      "op": "SUB"
    },
    "400": {
      "op": "NOT"
    },
    "401": {
      "fn": "Tlaloc_base.take",
      "offset": [
        768,
        795
      ],
      "op": "AND",
      "path": "0"
    },
    "402": {
      "fn": "Tlaloc_base.take",
      "offset": [
        784,
        794
      ],
      "op": "CALLER",
      "path": "0"
    },
    "403": {
      "fn": "Tlaloc_base.take",
      "offset": [
        768,
        795
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "404": {
      "fn": "Tlaloc_base.take",
      "offset": [
        768,
        795
      ],
      "op": "DUP2",
      "path": "0"
    },
    "405": {
      "fn": "Tlaloc_base.take",
      "offset": [
        768,
        795
      ],
      "op": "OR",
      "path": "0"
    },
    "406": {
      "fn": "Tlaloc_base.take",
      "offset": [
        768,
        795
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "407": {
      "fn": "Tlaloc_base.take",
      "offset": [
        768,
        795
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "408": {
      "fn": "Tlaloc_base.take",
      "offset": [
        768,
        795
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "409": {
      "fn": "Tlaloc_base.take",
      "offset": [
        857,
        867
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 2,
      "value": "0x2"
    },
    "411": {
      "fn": "Tlaloc_base.take",
      "offset": [
        857,
        867
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "412": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "414": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "415": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "DUP2",
      "path": "0"
    },
    "416": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "417": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8FC"
    },
    "420": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "MUL",
      "path": "0"
    },
    "421": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "422": {
      "fn": "Tlaloc_base.take",
      "offset": [
        857,
        867
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "423": {
      "fn": "Tlaloc_base.take",
      "offset": [
        768,
        773
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "425": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "DUP2",
      "path": "0"
    },
    "426": {
      "fn": "Tlaloc_base.take",
      "offset": [
        768,
        773
      ],
      "op": "DUP2",
      "path": "0"
    },
    "427": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "DUP2",
      "path": "0"
    },
    "428": {
      "fn": "Tlaloc_base.take",
      "offset": [
        857,
        867
      ],
      "op": "DUP6",
      "path": "0"
    },
    "429": {
      "fn": "Tlaloc_base.take",
      "offset": [
        784,
        794
      ],
      "op": "DUP9",
      "path": "0"
    },
    "430": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "DUP9",
      "path": "0"
    },
    "431": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "CALL",
      "path": "0"
    },
    "432": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "433": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "POP",
      "path": "0"
    },
    "434": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "POP",
      "path": "0"
    },
    "435": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "POP",
      "path": "0"
    },
    "436": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "POP",
      "path": "0"
    },
    "437": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "438": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "DUP1",
      "path": "0"
    },
    "439": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "440": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C5"
    },
    "443": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "444": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "445": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "447": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "DUP1",
      "path": "0"
    },
    "448": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "449": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "450": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "452": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "REVERT",
      "path": "0"
    },
    "453": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "454": {
      "fn": "Tlaloc_base.take",
      "offset": [
        842,
        868
      ],
      "op": "POP",
      "path": "0"
    },
    "455": {
      "fn": "Tlaloc_base.take",
      "jump": "o",
      "offset": [
        633,
        875
      ],
      "op": "JUMP",
      "path": "0"
    },
    "456": {
      "op": "JUMPDEST"
    },
    "457": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "459": {
      "op": "DUP2"
    },
    "460": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "462": {
      "op": "NOT"
    },
    "463": {
      "op": "DIV"
    },
    "464": {
      "op": "DUP4"
    },
    "465": {
      "op": "GT"
    },
    "466": {
      "op": "DUP3"
    },
    "467": {
      "op": "ISZERO"
    },
    "468": {
      "op": "ISZERO"
    },
    "469": {
      "op": "AND"
    },
    "470": {
      "op": "ISZERO"
    },
    "471": {
      "op": "PUSH2",
      "value": "0x1EE"
    },
    "474": {
      "op": "JUMPI"
    },
    "475": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "480": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "482": {
      "op": "SHL"
    },
    "483": {
      "op": "DUP2"
    },
    "484": {
      "op": "MSTORE"
    },
    "485": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "487": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "489": {
      "op": "MSTORE"
    },
    "490": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "492": {
      "op": "DUP2"
    },
    "493": {
      "op": "REVERT"
    },
    "494": {
      "op": "JUMPDEST"
    },
    "495": {
      "op": "POP"
    },
    "496": {
      "op": "MUL"
    },
    "497": {
      "op": "SWAP1"
    },
    "498": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "fe5cd2acba784063174d9bd279c166ffc6e9682a",
  "source": "pragma solidity ^0.8.1;\n\ncontract Tlaloc_base {\n\n    address payable public requester;\n    address payable public taker;\n//    string public location;\n//    uint public precLowMM;\n//    uint public precHighMM;\n    uint public premiumETH;\n    uint public insuredAmountETH;\n    uint public amountTakenETH;\n//    uint public timeDateStart;\n//    uint public timeDateEnd;\n//    uint public expirationDate;\n\n    constructor (uint _insuredAmountETH) payable {\n        //expirationDate = block.timestamp + 6;\n        requester = payable(msg.sender);\n        premiumETH = msg.value;\n        insuredAmountETH = _insuredAmountETH;\n    }\n\n\n    function take() external payable{\n        require(msg.value == insuredAmountETH*10**18, 'you must submit the insured amount');\n        taker = payable(msg.sender);\n        amountTakenETH == msg.value;\n        taker.transfer(premiumETH);\n    }\n\n}",
  "sourceMap": "25:853:0:-:0;;;407:219;;;;;;;;;;;;;;;;;;:::i;:::-;510:9;:31;;-1:-1:-1;;;;;;510:31:0;530:10;510:31;;;564:9;551:10;:22;583:16;:36;25:853;;14:194:1;;137:2;125:9;116:7;112:23;108:32;105:2;;;158:6;150;143:22;105:2;-1:-1:-1;186:16:1;;95:113;-1:-1:-1;95:113:1:o;:::-;25:853:0;;;;;;",
  "sourcePath": "contracts/Tlaloc_base.sol",
  "type": "contract"
}